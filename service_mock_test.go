// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_blog is a generated GoMock package.
package blog_test

import (
	blog "github.com/blogCRUDWebsocket/internal/app/blog"
	monitor "github.com/blogCRUDWebsocket/internal/app/monitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockdatabase is a mock of database interface
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *Mockdatabase) Create(b *blog.Blog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockdatabaseMockRecorder) Create(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockdatabase)(nil).Create), b)
}

// Read mocks base method
func (m *Mockdatabase) Read() ([]blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockdatabaseMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockdatabase)(nil).Read))
}

// Update mocks base method
func (m *Mockdatabase) Update(arg0 string, arg1 *blog.CreateBlog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update
func (mr *MockdatabaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockdatabase)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *Mockdatabase) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockdatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockdatabase)(nil).Delete), arg0)
}

// FindByID mocks base method
func (m *Mockdatabase) FindByID(arg0 string) (*blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockdatabaseMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*Mockdatabase)(nil).FindByID), arg0)
}

// MockMonitorRoom is a mock of MonitorRoom interface
type MockMonitorRoom struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorRoomMockRecorder
}

// MockMonitorRoomMockRecorder is the mock recorder for MockMonitorRoom
type MockMonitorRoomMockRecorder struct {
	mock *MockMonitorRoom
}

// NewMockMonitorRoom creates a new mock instance
func NewMockMonitorRoom(ctrl *gomock.Controller) *MockMonitorRoom {
	mock := &MockMonitorRoom{ctrl: ctrl}
	mock.recorder = &MockMonitorRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitorRoom) EXPECT() *MockMonitorRoomMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockMonitorRoom) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockMonitorRoomMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMonitorRoom)(nil).Run))
}

// Write mocks base method
func (m *MockMonitorRoom) Write(msg monitor.ChangeInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", msg)
}

// Write indicates an expected call of Write
func (mr *MockMonitorRoomMockRecorder) Write(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMonitorRoom)(nil).Write), msg)
}

// Leave mocks base method
func (m *MockMonitorRoom) Leave(client *monitor.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leave", client)
}

// Leave indicates an expected call of Leave
func (mr *MockMonitorRoomMockRecorder) Leave(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockMonitorRoom)(nil).Leave), client)
}

// Join mocks base method
func (m *MockMonitorRoom) Join(client *monitor.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Join", client)
}

// Join indicates an expected call of Join
func (mr *MockMonitorRoomMockRecorder) Join(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockMonitorRoom)(nil).Join), client)
}
